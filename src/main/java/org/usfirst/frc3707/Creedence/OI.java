// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3707.Creedence;

import org.usfirst.frc3707.Creedence.commands.autonomous.AutoGrabSequence;
import org.usfirst.frc3707.Creedence.commands.hatch.closeClaw;
import org.usfirst.frc3707.Creedence.commands.hatch.openClaw;
import org.usfirst.frc3707.Creedence.commands.hatch.thrustBackward;
import org.usfirst.frc3707.Creedence.commands.hatch.thrustForward;
import org.usfirst.frc3707.Creedence.commands.lift.hatchToBot;
import org.usfirst.frc3707.Creedence.commands.vision.GrabLine;

//import org.usfirst.frc3707.Creedence.commands.slideUp;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.buttons.POVButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    class XBoxController {
        private Joystick controller;

        private static final int leftTriggerAxis = 3;

        private static final int bButtonNumber = 2;
        private static final int yButtonNumber = 4;
        private static final int aButtonNumber = 1;
        private static final int xButtonNumber = 3;

        public XBoxController(int controllerPort){
            controller = new Joystick(controllerPort);

        }

        public Joystick getController(){
            return controller;
        }

        public double getLeftTrigger(){
            return controller.getRawAxis(leftTriggerAxis);
        }

        public boolean getBButtonPressed(){
            return controller.getRawButton(bButtonNumber);
        }

        public boolean getYButtonPressed(){
            return controller.getRawButton(yButtonNumber);
        }

        public boolean getAButtonPressed(){
            return controller.getRawButton(aButtonNumber);
        }

        public boolean getXButtonPressed(){
            return controller.getRawButton(xButtonNumber);
        }
    }
    
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public XBoxController driverController;
    public XBoxController operatorController;
    public POVButton up; 
    public POVButton down; 
    public POVButton left;
    //public JoystickButton select; dont use untill pneumatic lift installed
    //public JoystickButton start; ""


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driverController = new XBoxController(0);
        operatorController = new XBoxController(1);

        //left = new POVButton(joystick2, 270, 0);
        down = new POVButton(operatorController, 180, 0);
        //up = new POVButton(joystick2, 0, 0);

        b.whenPressed(new openClaw());
        y.whenPressed(new thrustForward());
        x.whenPressed(new closeClaw());
        a.whenPressed(new thrustBackward());
        //up.whenPressed(new hatchToMid());
        down.whenPressed(new hatchToBot());
        //left.whenPressed(new ballToBottom());

        //select.whenPressed(new slideUp());
        
        lb = new JoystickButton(driverController, 5);

        lb.whenPressed(new GrabLine());


        SmartDashboard.putData("Auto hatch snag Test", new AutoGrabSequence());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
