// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3707.Creedence;

import org.usfirst.frc3707.Creedence.commands.autonomousCommands.AutonomousCommand;
import org.usfirst.frc3707.Creedence.subsystems.DriveTrain;
import org.usfirst.frc3707.Creedence.subsystems.SPIpixy;
import org.usfirst.frc3707.Creedence.subsystems.ballIntake;
import org.usfirst.frc3707.Creedence.subsystems.climbSystem;
import org.usfirst.frc3707.Creedence.subsystems.hatchGrabber;
import org.usfirst.frc3707.Creedence.subsystems.liftSystem;
import org.usfirst.frc3707.Creedence.subsystems.shooter;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.VideoSink;
import edu.wpi.cscore.VideoSource.ConnectionStrategy;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static liftSystem liftSystem;
    public static ballIntake ballIntake;
    public static shooter shooter;
    public static hatchGrabber hatchGrabber;
    public static climbSystem climbSystem;

    private static VideoSink server;
    private static UsbCamera camera1;
    private static UsbCamera camera2;

    private int lastButton = 1;

    public static SPIpixy m_pixy;

    //public static PneumaticLift pneumaticLift; dont use untill pneumatic lift is installed

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be used
     * for any initialization code.
     */
    @Override
    public void robotInit() {

        m_pixy = new SPIpixy();

        camera1 = CameraServer.getInstance().startAutomaticCapture(0); //use for camera on smart Dashboard
        camera2 = CameraServer.getInstance().startAutomaticCapture(2);

        server = CameraServer.getInstance().addSwitchedCamera("switched camera");
        
        camera1.setConnectionStrategy(ConnectionStrategy.kKeepOpen);
        camera2.setConnectionStrategy(ConnectionStrategy.kKeepOpen);



        camera1.setResolution(160, 120);
        camera1.setFPS(30);

        camera2.setResolution(160, 120);
        camera2.setFPS(30);


        driveTrain = new DriveTrain();
        liftSystem = new liftSystem();
        ballIntake = new ballIntake();
        shooter = new shooter();
        driveTrain.init();
        hatchGrabber = new hatchGrabber();
        climbSystem = new climbSystem();
        //pneumaticLift = new PneumaticLift();

        // OI must be constructed after subsystems. If the OI creates Commands
        // (which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit. You can use it to
     * reset subsystems before shutting down.
     */
    @Override
    public void disabledInit() {

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        // autonomousCommand = chooser.getSelected();
        // // schedule the autonomous command (example)
        // if (autonomousCommand != null)
        //     autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null)
            autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {

        /*if (!lastButton)
        {
            if (oi.joystick1.getRawButton(1))
            {
                lastButton = true;
                server.setSource(camera1);
            }
            else if (oi.joystick1.getRawButton(2))
            {
                lastButton = true;
                server.setSource(camera2);
            }
        }*/
        boolean joystickButton1 = oi.joystick1.getRawButton(1);
        boolean joystickButton2 = oi.joystick1.getRawButton(2);

        if (joystickButton1 && lastButton != 1)
        {
            server.setSource(camera1);
            System.out.println("Switching to Camea One");
        }
        else if (joystickButton2 && lastButton != 2)
        {
            server.setSource(camera2);
            System.out.println("Switching to Camera Two");
        }

        if (joystickButton1)
        {
            lastButton = 1;
        }
        else if (joystickButton2)
        {
            lastButton = 2;
        }
        else
        {
            lastButton = 0;
        }


        

        Scheduler.getInstance().run();
    }
}
